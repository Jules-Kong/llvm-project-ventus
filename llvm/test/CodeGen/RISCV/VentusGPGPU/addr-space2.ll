; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -mcpu=ventus-gpgpu -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=VENTUS %s

@foo.b = internal addrspace(3) global [5 x i32] undef, align 4

define spir_kernel void @foo(ptr addrspace(1) noundef align 4 %out) {
; VENTUS-LABEL: foo:
; VENTUS:       # %bb.0: # %entry
; VENTUS-NEXT:    addi sp, sp, -48
; VENTUS-NEXT:    addi tp, tp, -48
; VENTUS-NEXT:    .cfi_def_cfa_offset 48
; VENTUS-NEXT:    sw ra, 44(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    sw s0, 40(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    sw s1, 36(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    sw s2, 32(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    .cfi_offset ra, -4
; VENTUS-NEXT:    .cfi_offset s0, -8
; VENTUS-NEXT:    .cfi_offset s1, -12
; VENTUS-NEXT:    .cfi_offset s2, -16
; VENTUS-NEXT:    lw s0, 0(a0)
; VENTUS-NEXT:    lui a0, %hi(foo.b)
; VENTUS-NEXT:    addi s1, a0, %lo(foo.b)
; VENTUS-NEXT:    addi s2, tp, 12
; VENTUS-NEXT:    vmv.s.x v0, s2
; VENTUS-NEXT:    vmv.s.x v1, s1
; VENTUS-NEXT:    vmv.s.x v2, s0
; VENTUS-NEXT:    call bar
; VENTUS-NEXT:    vmv.s.x v0, zero
; VENTUS-NEXT:    call _Z12get_local_idj
; VENTUS-NEXT:    vmv.x.s a0, v0
; VENTUS-NEXT:    li a1, 4
; VENTUS-NEXT:    vmv.s.x v0, a1
; VENTUS-NEXT:    vmv.s.x v1, a0
; VENTUS-NEXT:    vbltu v0, v1, .LBB0_2
; VENTUS-NEXT:  # %bb.1: # %if.then
; VENTUS-NEXT:    vmv.s.x v0, zero
; VENTUS-NEXT:    slli a0, a0, 2
; VENTUS-NEXT:    add s2, s2, a0
; VENTUS-NEXT:    add s1, s1, a0
; VENTUS-NEXT:    lw a1, 0(s1)
; VENTUS-NEXT:    vlw v1, zero(s2)
; VENTUS-NEXT:    vmv.s.x v2, a1
; VENTUS-NEXT:    add a0, s0, a0
; VENTUS-NEXT:    lw a1, 0(a0)
; VENTUS-NEXT:    vmul.vv v1, v2, v1
; VENTUS-NEXT:    vmv.s.x v2, a1
; VENTUS-NEXT:    vadd.vv v1, v2, v1
; VENTUS-NEXT:    vsuxei32.v v1, (a0), v0
; VENTUS-NEXT:    j .LBB0_3
; VENTUS-NEXT:  .LBB0_2: # %if.else
; VENTUS-NEXT:    slli a0, a0, 2
; VENTUS-NEXT:    add a0, s0, a0
; VENTUS-NEXT:    sw zero, 0(a0)
; VENTUS-NEXT:  .LBB0_3: # %if.end
; VENTUS-NEXT:    lw ra, 44(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    lw s0, 40(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    lw s1, 36(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    lw s2, 32(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    addi sp, sp, 48
; VENTUS-NEXT:    addi tp, tp, 48
; VENTUS-NEXT:    ret
entry:
  %a = alloca [5 x i32], align 4, addrspace(5)
  call void @llvm.lifetime.start.p5(i64 20, ptr addrspace(5) %a)
  call void @bar(ptr addrspace(5) noundef %a, ptr addrspace(3) noundef @foo.b, ptr addrspace(1) noundef %out)
  %call = call i32 @_Z12get_local_idj(i32 noundef 0)
  %cmp = icmp ult i32 %call, 5
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds [5 x i32], ptr addrspace(5) %a, i32 0, i32 %call
  %0 = load i32, ptr addrspace(5) %arrayidx, align 4
  %arrayidx1 = getelementptr inbounds [5 x i32], ptr addrspace(3) @foo.b, i32 0, i32 %call
  %1 = load i32, ptr addrspace(3) %arrayidx1, align 4
  %mul = mul nsw i32 %1, %0
  %arrayidx2 = getelementptr inbounds i32, ptr addrspace(1) %out, i32 %call
  %2 = load i32, ptr addrspace(1) %arrayidx2, align 4
  %add = add nsw i32 %2, %mul
  store i32 %add, ptr addrspace(1) %arrayidx2, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %arrayidx3 = getelementptr inbounds i32, ptr addrspace(1) %out, i32 %call
  store i32 0, ptr addrspace(1) %arrayidx3, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @llvm.lifetime.end.p5(i64 20, ptr addrspace(5) %a)
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p5(i64 immarg, ptr addrspace(5) nocapture)

; Function Attrs: convergent
declare dso_local void @bar(ptr addrspace(5) noundef, ptr addrspace(3) noundef, ptr addrspace(1) noundef)

; Function Attrs: convergent mustprogress nofree nounwind willreturn memory(none)
declare dso_local i32 @_Z12get_local_idj(i32 noundef)

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p5(i64 immarg, ptr addrspace(5) nocapture)
