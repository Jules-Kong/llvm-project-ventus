; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -mcpu=ventus-gpgpu -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=VENTUS %s
; Function Attrs: noinline nounwind optnone

define dso_local ptr @fmadd(ptr noundef %a, ptr noundef %b, ptr noundef %c) #0 {
; VENTUS-LABEL: fmadd:
; VENTUS:       # %bb.0: # %entry
; VENTUS-NEXT:    li x10, 0
; VENTUS-NEXT:    li x11, 0
; VENTUS-NEXT:    li x12, 9
; VENTUS-NEXT:    vmv.s.x v3, x0
; VENTUS-NEXT:    blt x12, x11, .LBB0_2
; VENTUS-NEXT:  .LBB0_1: # %for.body
; VENTUS-NEXT:    # =>This Inner Loop Header: Depth=1
; VENTUS-NEXT:    vmv.s.x v4, x10
; VENTUS-NEXT:    vadd.vv v5, v0, v4
; VENTUS-NEXT:    vmv.x.s x13, v5
; VENTUS-NEXT:    vluxei32.v v5, (x13), v3
; VENTUS-NEXT:    vadd.vv v6, v2, v4
; VENTUS-NEXT:    vmv.x.s x13, v6
; VENTUS-NEXT:    vluxei32.v v6, (x13), v3
; VENTUS-NEXT:    vadd.vv v4, v1, v4
; VENTUS-NEXT:    vmv.x.s x14, v4
; VENTUS-NEXT:    vluxei32.v v4, (x14), v3
; VENTUS-NEXT:    vfmadd.vv v6, v5, v4
; VENTUS-NEXT:    vsuxei32.v v6, (x13), v3
; VENTUS-NEXT:    addi x11, x11, 1
; VENTUS-NEXT:    addi x10, x10, 4
; VENTUS-NEXT:    bge x12, x11, .LBB0_1
; VENTUS-NEXT:  .LBB0_2: # %for.end
; VENTUS-NEXT:    vadd.vx v0, v2, x0
; VENTUS-NEXT:    ret
entry:
  %a.addr = alloca ptr, align 4, addrspace(5)
  %b.addr = alloca ptr, align 4, addrspace(5)
  %c.addr = alloca ptr, align 4, addrspace(5)
  %i = alloca i32, align 4, addrspace(5)
  %d = alloca float, align 4, addrspace(5)
  store ptr %a, ptr addrspace(5) %a.addr, align 4
  store ptr %b, ptr addrspace(5) %b.addr, align 4
  store ptr %c, ptr addrspace(5) %c.addr, align 4
  store i32 0, ptr addrspace(5) %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, ptr addrspace(5) %i, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load ptr, ptr addrspace(5) %a.addr, align 4
  %2 = load i32, ptr addrspace(5) %i, align 4
  %arrayidx = getelementptr inbounds float, ptr %1, i32 %2
  %3 = load float, ptr %arrayidx, align 4
  %4 = load ptr, ptr addrspace(5) %c.addr, align 4
  %5 = load i32, ptr addrspace(5) %i, align 4
  %arrayidx1 = getelementptr inbounds float, ptr %4, i32 %5
  %6 = load float, ptr %arrayidx1, align 4
  %mul = fmul float %3, %6
  store float %mul, ptr addrspace(5) %d, align 4
  %7 = load float, ptr addrspace(5) %d, align 4
  %8 = load ptr, ptr addrspace(5) %b.addr, align 4
  %9 = load i32, ptr addrspace(5) %i, align 4
  %arrayidx2 = getelementptr inbounds float, ptr %8, i32 %9
  %10 = load float, ptr %arrayidx2, align 4
  %add = fadd float %7, %10
  %11 = load ptr, ptr addrspace(5) %c.addr, align 4
  %12 = load i32, ptr addrspace(5) %i, align 4
  %arrayidx3 = getelementptr inbounds float, ptr %11, i32 %12
  store float %add, ptr %arrayidx3, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %13 = load i32, ptr addrspace(5) %i, align 4
  %inc = add nsw i32 %13, 1
  store i32 %inc, ptr addrspace(5) %i, align 4
  br label %for.cond, !llvm.loop !5

for.end:                                          ; preds = %for.cond
  %14 = load ptr, ptr addrspace(5) %c.addr, align 4
  ret ptr %14
}

; Function Attrs: noinline nounwind optnone
define dso_local float @fmadd_llvm(float noundef %a, float noundef %b, float noundef %c) #0 {
; VENTUS-LABEL: fmadd_llvm:
; VENTUS:       # %bb.0:
; VENTUS-NEXT:    vfmadd.vv v1, v0, v2
; VENTUS-NEXT:    vadd.vx v0, v1, x0
; VENTUS-NEXT:    ret
  %result = call float @llvm.fmuladd.f32(float %a, float %b, float %c)
  ret float %result
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fmuladd.f32(float, float, float) #1

; Function Attrs: noinline nounwind optnone
define dso_local float @fmsub(float noundef %a, float noundef %b, float noundef %c) #0 {
; VENTUS-LABEL: fmsub:
; VENTUS:       # %bb.0:
; VENTUS-NEXT:    vfmsub.vv v1, v0, v2
; VENTUS-NEXT:    vadd.vx v0, v1, x0
; VENTUS-NEXT:    ret
  %mul = fmul float %a, %b
  %sub = fsub float %mul, %c
  ret float %sub
}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.mustprogress"}
