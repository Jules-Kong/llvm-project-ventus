; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -mcpu=ventus-gpgpu -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=VENTUS %s

define float @vand_v(float %a, float %b) {
; VENTUS-LABEL: vand_v:
; VENTUS:       # %bb.0:
; VENTUS-NEXT:    vfadd.vv v0, v0, v1
; VENTUS-NEXT:    ret
  %1 = fadd float %a, %b
  ret float %1
}

define i32 @vand_i(i32 %a) {
; VENTUS-LABEL: vand_i:
; VENTUS:       # %bb.0:
; VENTUS-NEXT:    vand.vi v0, v0, 4
; VENTUS-NEXT:    ret
  %1 = and i32 %a, 4
  ret i32 %1
}

define i32 @vor_v(i32 %a, i32 %b) {
; VENTUS-LABEL: vor_v:
; VENTUS:       # %bb.0:
; VENTUS-NEXT:    vor.vv v0, v0, v1
; VENTUS-NEXT:    ret
  %1 = or i32 %a, %b
  ret i32 %1
}

define i32 @vor_i(i32 %a) {
; VENTUS-LABEL: vor_i:
; VENTUS:       # %bb.0:
; VENTUS-NEXT:    vor.vi v0, v0, 4
; VENTUS-NEXT:    ret
  %1 = or i32 %a, 4
  ret i32 %1
}

define i32 @vxor_v(i32 %a, i32 %b) {
; VENTUS-LABEL: vxor_v:
; VENTUS:       # %bb.0:
; VENTUS-NEXT:    vxor.vv v0, v0, v1
; VENTUS-NEXT:    ret
  %1 = xor i32 %a, %b
  ret i32 %1
}

define i32 @vxor_i(i32 %a) {
; VENTUS-LABEL: vxor_i:
; VENTUS:       # %bb.0:
; VENTUS-NEXT:    vxor.vi v0, v0, 4
; VENTUS-NEXT:    ret
  %1 = xor i32 %a, 4
  ret i32 %1
}
