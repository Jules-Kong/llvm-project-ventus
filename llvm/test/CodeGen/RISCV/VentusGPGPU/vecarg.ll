; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -mcpu=ventus-gpgpu --verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=VENTUS %s

; __kernel void test_kernel(
; char2 c, uchar2 uc, short2 s, ushort2 us, int2 i, uint2 ui, float2 f,
; __global float2 *result)
; {
;     result[0] = convert_float2(c);
;     result[1] = convert_float2(uc);
;     result[2] = convert_float2(s);
;     result[3] = convert_float2(us);
;     result[4] = convert_float2(i);
;     result[5] = convert_float2(ui);
;     result[6] = f;
; }

; Function Attrs: convergent mustprogress nofree norecurse nounwind willreturn memory(argmem: write)
define dso_local ventus_kernel void @test_kernel(<2 x i8> noundef %c, <2 x i8> noundef %uc, <2 x i16> noundef %s, <2 x i16> noundef %us, <2 x i32> noundef %i, <2 x i32> noundef %ui, <2 x float> noundef %f, ptr addrspace(1) nocapture noundef writeonly align 8 %result) {
; VENTUS-LABEL: test_kernel:
; VENTUS:       # %bb.0: # %entry
; VENTUS-NEXT:    addi sp, sp, 56
; VENTUS-NEXT:    .cfi_def_cfa_offset 56
; VENTUS-NEXT:    addi tp, tp, 4
; VENTUS-NEXT:    .cfi_def_cfa_offset 4
; VENTUS-NEXT:    regext zero, zero, 1
; VENTUS-NEXT:    vmv.v.x v32, tp
; VENTUS-NEXT:    sw ra, 0(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    .cfi_offset ra, 4
; VENTUS-NEXT:    .cfi_offset v33.l, 0
; VENTUS-NEXT:    lw t0, 32(a0)
; VENTUS-NEXT:    sw t0, -48(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    lw t0, 36(a0)
; VENTUS-NEXT:    sw t0, -44(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    lw t0, 28(a0)
; VENTUS-NEXT:    sw t0, -40(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    lw t0, 24(a0)
; VENTUS-NEXT:    sw t0, -36(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    lw t0, 20(a0)
; VENTUS-NEXT:    sw t0, -32(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    lw t0, 16(a0)
; VENTUS-NEXT:    sw t0, -28(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    lhu t0, 10(a0)
; VENTUS-NEXT:    sw t0, -24(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    lhu t0, 8(a0)
; VENTUS-NEXT:    sw t0, -20(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    lhu t0, 6(a0)
; VENTUS-NEXT:    sw t0, -16(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    lw t0, 0(a0)
; VENTUS-NEXT:    lhu t1, 4(a0)
; VENTUS-NEXT:    sw t1, -12(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    srli t1, t0, 24
; VENTUS-NEXT:    sw t1, -8(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    srli t1, t0, 16
; VENTUS-NEXT:    andi t1, t1, 255
; VENTUS-NEXT:    sw t1, -4(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    lw t1, 40(a0)
; VENTUS-NEXT:    sw t1, -52(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    lbu t1, 0(a0)
; VENTUS-NEXT:    srli t0, t0, 8
; VENTUS-NEXT:    andi t0, t0, 255
; VENTUS-NEXT:    vmv.v.x v0, t1
; VENTUS-NEXT:    vmv.v.x v1, t0
; VENTUS-NEXT:    call _Z14convert_float2Dv2_c
; VENTUS-NEXT:    lw t0, -52(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    regext zero, zero, 1
; VENTUS-NEXT:    vmv.v.x v33, t0
; VENTUS-NEXT:    regext zero, zero, 8
; VENTUS-NEXT:    vsw12.v v1, 4(v33)
; VENTUS-NEXT:    regext zero, zero, 8
; VENTUS-NEXT:    vsw12.v v0, 0(v33)
; VENTUS-NEXT:    lw t0, -4(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    vmv.v.x v0, t0
; VENTUS-NEXT:    lw t0, -8(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    vmv.v.x v1, t0
; VENTUS-NEXT:    call _Z14convert_float2Dv2_h
; VENTUS-NEXT:    regext zero, zero, 8
; VENTUS-NEXT:    vsw12.v v1, 12(v33)
; VENTUS-NEXT:    regext zero, zero, 8
; VENTUS-NEXT:    vsw12.v v0, 8(v33)
; VENTUS-NEXT:    lw t0, -12(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    vmv.v.x v0, t0
; VENTUS-NEXT:    lw t0, -16(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    vmv.v.x v1, t0
; VENTUS-NEXT:    call _Z14convert_float2Dv2_s
; VENTUS-NEXT:    regext zero, zero, 8
; VENTUS-NEXT:    vsw12.v v1, 20(v33)
; VENTUS-NEXT:    regext zero, zero, 8
; VENTUS-NEXT:    vsw12.v v0, 16(v33)
; VENTUS-NEXT:    lw t0, -20(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    vmv.v.x v0, t0
; VENTUS-NEXT:    lw t0, -24(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    vmv.v.x v1, t0
; VENTUS-NEXT:    call _Z14convert_float2Dv2_t
; VENTUS-NEXT:    regext zero, zero, 8
; VENTUS-NEXT:    vsw12.v v1, 28(v33)
; VENTUS-NEXT:    regext zero, zero, 8
; VENTUS-NEXT:    vsw12.v v0, 24(v33)
; VENTUS-NEXT:    lw t0, -28(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    vmv.v.x v0, t0
; VENTUS-NEXT:    lw t0, -32(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    vmv.v.x v1, t0
; VENTUS-NEXT:    call _Z14convert_float2Dv2_i
; VENTUS-NEXT:    regext zero, zero, 8
; VENTUS-NEXT:    vsw12.v v1, 36(v33)
; VENTUS-NEXT:    regext zero, zero, 8
; VENTUS-NEXT:    vsw12.v v0, 32(v33)
; VENTUS-NEXT:    lw t0, -36(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    vmv.v.x v0, t0
; VENTUS-NEXT:    lw t0, -40(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    vmv.v.x v1, t0
; VENTUS-NEXT:    call _Z14convert_float2Dv2_j
; VENTUS-NEXT:    regext zero, zero, 8
; VENTUS-NEXT:    vsw12.v v1, 44(v33)
; VENTUS-NEXT:    regext zero, zero, 8
; VENTUS-NEXT:    vsw12.v v0, 40(v33)
; VENTUS-NEXT:    lw t0, -44(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    lw t1, -52(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    sw t0, 52(t1)
; VENTUS-NEXT:    lw t0, -48(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    sw t0, 48(t1)
; VENTUS-NEXT:    lw ra, 0(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    addi sp, sp, -56
; VENTUS-NEXT:    addi tp, tp, -4
; VENTUS-NEXT:    ret
entry:
  ; there is no FileCheck now
  %call = tail call <2 x float> @_Z14convert_float2Dv2_c(<2 x i8> noundef %c) #2
  store <2 x float> %call, ptr addrspace(1) %result, align 8
  %call1 = tail call <2 x float> @_Z14convert_float2Dv2_h(<2 x i8> noundef %uc) #2
  %arrayidx2 = getelementptr inbounds <2 x float>, ptr addrspace(1) %result, i32 1
  store <2 x float> %call1, ptr addrspace(1) %arrayidx2, align 8
  %call3 = tail call <2 x float> @_Z14convert_float2Dv2_s(<2 x i16> noundef %s) #2
  %arrayidx4 = getelementptr inbounds <2 x float>, ptr addrspace(1) %result, i32 2
  store <2 x float> %call3, ptr addrspace(1) %arrayidx4, align 8
  %call5 = tail call <2 x float> @_Z14convert_float2Dv2_t(<2 x i16> noundef %us) #2
  %arrayidx6 = getelementptr inbounds <2 x float>, ptr addrspace(1) %result, i32 3
  store <2 x float> %call5, ptr addrspace(1) %arrayidx6, align 8
  %call7 = tail call <2 x float> @_Z14convert_float2Dv2_i(<2 x i32> noundef %i) #2
  %arrayidx8 = getelementptr inbounds <2 x float>, ptr addrspace(1) %result, i32 4
  store <2 x float> %call7, ptr addrspace(1) %arrayidx8, align 8
  %call9 = tail call <2 x float> @_Z14convert_float2Dv2_j(<2 x i32> noundef %ui) #2
  %arrayidx10 = getelementptr inbounds <2 x float>, ptr addrspace(1) %result, i32 5
  store <2 x float> %call9, ptr addrspace(1) %arrayidx10, align 8
  %arrayidx11 = getelementptr inbounds <2 x float>, ptr addrspace(1) %result, i32 6
  store <2 x float> %f, ptr addrspace(1) %arrayidx11, align 8
  ret void
}

declare dso_local <2 x float> @_Z14convert_float2Dv2_c(<2 x i8> noundef) local_unnamed_addr #1
declare dso_local <2 x float> @_Z14convert_float2Dv2_h(<2 x i8> noundef) local_unnamed_addr #1
declare dso_local <2 x float> @_Z14convert_float2Dv2_s(<2 x i16> noundef) local_unnamed_addr #1
declare dso_local <2 x float> @_Z14convert_float2Dv2_t(<2 x i16> noundef) local_unnamed_addr #1
declare dso_local <2 x float> @_Z14convert_float2Dv2_i(<2 x i32> noundef) local_unnamed_addr #1
declare dso_local <2 x float> @_Z14convert_float2Dv2_j(<2 x i32> noundef) local_unnamed_addr #1


